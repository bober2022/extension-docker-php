#!/bin/sh

# This script wraps docker-php-ext-install, properly configuring the system.
# Let's set a sane environment
set -o errexit
set -o nounset
if test "${IPE_DEBUG:-}" = "1"; then
	set -x
fi

if ! which docker-php-ext-configure >/dev/null || ! which docker-php-ext-enable >/dev/null || ! which docker-php-ext-install >/dev/null || ! which docker-php-source >/dev/null; then
	printf 'The script %s is meant to be used with official Docker PHP Images - https://hub.docker.com/_/php\n' "$0" >&2
	exit 1
fi

IPE_VERSION=master

StandWithUkraine() {
	if test -t 1 && ! grep -Eq '^VERSION=.*jessie' /etc/os-release; then
		printf '\e[37;44m#StandWith\e[30;43mUkraine\e[0m\n'
	else
		printf '#StandWithUkraine\n'
	fi
}

if test "$IPE_VERSION" = master && test "${CI:-}" != true; then
	cat <<EOF
EOF
	StandWithUkraine
	sleep 10 || true
else
	printf 'install-php-extensions v.%s\n' "$IPE_VERSION"
	StandWithUkraine
fi

# Reset the Internal Field Separator
resetIFS() {
'
}

# Set these variables:
# - DISTRO containing the distribution name (eg 'alpine', 'debian')
# - DISTRO_VERSION_NUMBER containing the distribution version (eg '3.14' for Alpine, 11 for Debian)
# - DISTRO_VERSION containing the distribution name and its version(eg 'alpine@3.14', 'debian@11')
# - DISTRO_MAJMIN_VERSION always containing a number representing the distribution version (eg 314 for Alpine, 1100 for Debian)
setDistro() {
	if ! test -r /etc/os-release; then
		printf 'The file /etc/os-release is not readable\n' >&2
		exit 1
	fi
	DISTRO="$(cat /etc/os-release | grep -E ^ID= | cut -d = -f 2)"
	DISTRO_VERSION_NUMBER="$(cat /etc/os-release | grep -E ^VERSION_ID= | cut -d = -f 2 | cut -d '"' -f 2 | cut -d . -f 1,2)"
	DISTRO_VERSION="$(printf '%s@%s' $DISTRO $DISTRO_VERSION_NUMBER)"
	DISTRO_MAJMIN_VERSION="$(echo "$DISTRO_VERSION_NUMBER" | awk -F. '{print $1*100+$2}')"
}

# Set:
# - PHP_MAJMIN_VERSION: Major-Minor version, format MMmm (example 800 for PHP 8.0.1)
# - PHP_MAJDOTMIN_VERSION: Major-Minor version, format M.m (example 8.0 for PHP 8.0.1)
# - PHP_MAJMINPAT_VERSION: Major-Minor-Patch version, format MMmmpp (example 80001 for PHP 8.0.1) variables containing integers values
# - PHP_MAJDOTMINDOTPAT_VERSION: Major-Minor-Patch version, format M.m.p (example 8.0.1 for PHP 8.0.1)
# - PHP_THREADSAFE: 1 if PHP is thread-safe (TS), 0 if not thread-safe (NTS)
# - PHP_DEBUGBUILD: 1 if PHP is debug build (configured with "--enable-debug"), 0 otherwise
# - PHP_BITS: 32 if PHP is compiled for 32-bit, 64 if 64-bit
# - PHP_EXTDIR: the absolute path where the PHP extensions reside
setPHPVersionVariables() {
	PHP_MAJDOTMINDOTPAT_VERSION="$(php-config --version)"
	PHP_MAJMIN_VERSION=$(printf '%s' "$PHP_MAJDOTMINDOTPAT_VERSION" | awk -F. '{print $1*100+$2}')
	PHP_MAJDOTMIN_VERSION=$(printf '%s' "$PHP_MAJDOTMINDOTPAT_VERSION" | cut -d. -f1-2)
	PHP_MAJMINPAT_VERSION=$(printf '%s' "$PHP_MAJDOTMINDOTPAT_VERSION" | awk -F. '{print $1*10000+$2*100+$3}')
	PHP_THREADSAFE=$(php -n -r 'echo ZEND_THREAD_SAFE ? 1 : 0;')
	PHP_DEBUGBUILD=$(php -n -r 'echo ZEND_DEBUG_BUILD ? 1 : 0;')
	PHP_BITS=$(php -n -r 'echo PHP_INT_SIZE * 8;')
	PHP_EXTDIR="$(php -d display_errors=stderr -r 'echo realpath(ini_get("extension_dir"));')"
}

# Fix apt-get being very slow on Debian Jessie
# See https://bugs.launchpad.net/ubuntu/+source/apt/+bug/1332440
fixMaxOpenFiles() {
	fixMaxOpenFiles_cur=$(ulimit -n 2>/dev/null || echo 0)
	if test "$fixMaxOpenFiles_cur" -gt 10000; then
		ulimit -n 10000
	fi
}

# Get the directory containing the compiled PHP extensions
#
# Output:
#   The absolute path of the extensions dir
getPHPExtensionsDir() {
	php -i | grep -E '^extension_dir' | head -n1 | tr -s '[:space:]*=>[:space:]*' '|' | cut -d'|' -f2
}

# Normalize the name of a PHP extension
#
# Arguments:
#   $1: the name of the module to be normalized
#
# Output:
#   The normalized module name
normalizePHPModuleName() {
	normalizePHPModuleName_name="$1"
	case "$normalizePHPModuleName_name" in
		*A* | *B* | *C* | *D* | *E* | *F* | *G* | *H* | *I* | *J* | *K* | *L* | *M* | *N* | *O* | *P* | *Q* | *R* | *S* | *T* | *U* | *V* | *W* | *X* | *Y* | *Z*)
			normalizePHPModuleName_name="$(LC_CTYPE=C printf '%s' "$normalizePHPModuleName_name" | tr '[:upper:]' '[:lower:]')"
			;;
	esac
	case "$normalizePHPModuleName_name" in
		datadog_trace)
			normalizePHPModuleName_name=ddtrace
			;;
		ioncube | ioncube\ loader)
			normalizePHPModuleName_name='ioncube_loader'
			;;
		pecl_http)
			normalizePHPModuleName_name='http'
			;;
		zend\ opcache)
			normalizePHPModuleName_name='opcache'
			;;
		libsodium)
			if test $PHP_MAJMIN_VERSION -ge 700; then
				normalizePHPModuleName_name='sodium'
			fi
			;;
		sodium)
			if test $PHP_MAJMIN_VERSION -lt 700; then
				normalizePHPModuleName_name='libsodium'
			fi
			;;
		*\ *)
			printf '### WARNING Unrecognized module name: %s ###\n' "$1" >&2
			;;
	esac
	printf '%s' "$normalizePHPModuleName_name"
}

# Parse a package.xml (or package2.xml) file and extract the module name and version
#
# Arguments:
#   $1: the patho to the XML file
#
# Set these variables:
# - EXTRACTPACKAGEVERSIONFROMXML_NAME
# - EXTRACTPACKAGEVERSIONFROMXML_VERSION
#
# Output:
#   Nothing
#
# Return:
#   0 (true): if the string is in the list
#   1 (false): if the string is not in the list
extractPackageVersionFromXML() {
	if ! test -f "$1"; then
		printf 'Unable to find the file\n%s\n' >&2
		return 1
	fi
	extractPackageVersionFromXML_code="$(
		cat <<'EOT'
$doc = new DOMDocument();
if (!$doc->load($argv[1])) {
	fwrite(STDERR, "Failed to load XML file\n");
	exit(1);
}
set_error_handler(
	static function($errno, $errstr) {
		fwrite(STDERR, trim((string) $errstr) . "\n");
		exit(1);
	},
	-1
);
$xpath = new DOMXpath($doc);
$xpath->registerNamespace('v20', 'http://pear.php.net/dtd/package-2.0');
$xpath->registerNamespace('v21', 'http://pear.php.net/dtd/package-2.1');
if ($xpath->query('/v20:package/v20:dependencies')->length === 1) {
	$ns = 'v20:';
} elseif ($xpath->query('/v21:package/v21:dependencies')->length === 1) {
	$ns = 'v21:';
} elseif ($xpath->query('/package')->length === 1) {
	$ns = '';
} else {
	fwrite(STDERR, "Unsupported namespace of the XML of package version details\n");
}
$nodes = $xpath->query("/{$ns}package/{$ns}name");
$name = trim((string) $nodes[0]->nodeValue);
if ($ns === '') {
	$nodes = $xpath->query("/{$ns}package/{$ns}version");
} else {
	$nodes = $xpath->query("/{$ns}package/{$ns}version/{$ns}release");
}
$version = trim((string) $nodes[0]->nodeValue);
echo "EXTRACTPACKAGEVERSIONFROMXML_NAME='{$name}'\n";
echo "EXTRACTPACKAGEVERSIONFROMXML_VERSION='{$version}'\n";
exit(0);
EOT
	)"
	extractPackageVersionFromXML_vars="$(php -n -d display_errors=stderr -r "$extractPackageVersionFromXML_code" "$1")"
	if test -z "$extractPackageVersionFromXML_vars"; then
		return 1
	fi
	eval "$extractPackageVersionFromXML_vars"
	return 0
}

# Parse a module name (and optionally version) as received via command arguments, extracting the version and normalizing it
# Examples:
#   xdebug-2.9.8
#   xdebug-^2
#   xdebug-^2.9
#
# Arguments:
#   $1: the name of the module to be normalized
#
# Set these variables:
# - PROCESSED_PHP_MODULE_ARGUMENT
#
# Optionally set these variables:
# - PHP_WANTEDMODULEVERSION_<...> (where <...> is the normalized module name)
# - PHP_MODULESOURCECODEPATH_<...> (where <...> is the normalized module name)
#
# Output:
#   Nothing
processPHPModuleArgument() {
	processPHPModuleArgument_arg="$1"
	# Convert GitHub short form to long url,
	# for example: from
	# php-memcached-dev/php-memcached@8f106564e6bb005ca6100b12ccc89000daafa9d8
	# to
	# https://codeload.github.com/php-memcached-dev/php-memcached/tar.gz/8f106564e6bb005ca6100b12ccc89000daafa9d8
	processPHPModuleArgument_arg="$(printf '%s' "$processPHPModuleArgument_arg" | sed -E 's/^([a-zA-Z0-9_.\-]+\/[a-zA-Z0-9_.\-]+)@(.+$)/https:\/\/codeload.github.com\/\1\/tar.gz\/\2/')"
	# Let's check if $processPHPModuleArgument_arg is an URL
	if printf '%s' "$processPHPModuleArgument_arg" | grep -Eq '^https?://[^ ]+/[^ ]+$'; then
